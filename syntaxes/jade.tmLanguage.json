{
  "name": "Jade",
  "scopeName": "text.jade",
  "fileTypes": ["jade"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#doctype"
    },
    {
      "include": "#filter"
    },
    {
      "include": "#flow-control"
    },
    {
      "include": "#mixin-declaration"
    },
    {
      "include": "#mixin-call"
    },
    {
      "include": "#tag"
    },
    {
      "include": "#script-block"
    },
    {
      "include": "#plain-text"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.jade",
          "match": "^\\s*//(?!-)(.*)"
        },
        {
          "name": "comment.block.unbuffered.jade",
          "begin": "^\\s*//-",
          "end": "^(?!(\\s*//-|\\s*$))"
        }
      ]
    },
    "doctype": {
      "name": "meta.doctype.jade",
      "match": "^(doctype)(\\s+.+)?$",
      "captures": {
        "1": { "name": "keyword.other.doctype.jade" },
        "2": { "name": "constant.language.doctype.jade" }
      }
    },
    "filter": {
      "name": "meta.filter.jade",
      "begin": "^(\\s*):([\\w-]+)",
      "beginCaptures": {
        "2": { "name": "entity.name.function.jade" }
      },
      "end": "^(?!(\\s+)|$)",
      "patterns": [
        {
          "match": ".",
          "name": "string.unquoted.filter-content.jade"
        }
      ]
    },
    "flow-control": {
      "patterns": [
        {
          "name": "meta.control.if.jade",
          "match": "^\\s*(if|else if|else|unless)(\\s+|$)(.+)?$",
          "captures": {
            "1": { "name": "keyword.control.conditional.jade" },
            "3": { "name": "source.js.embedded.jade" }
          }
        },
        {
          "name": "meta.control.each.jade",
          "match": "^\\s*(each|for|while)(\\s+|$)(.+)?$",
          "captures": {
            "1": { "name": "keyword.control.loop.jade" },
            "3": { "name": "source.js.embedded.jade" }
          }
        },
        {
          "name": "meta.control.case.jade",
          "match": "^\\s*(case|when|default)(\\s+|$)(.+)?$",
          "captures": {
            "1": { "name": "keyword.control.conditional.jade" },
            "3": { "name": "source.js.embedded.jade" }
          }
        }
      ]
    },
    "mixin-declaration": {
      "name": "meta.mixin.jade",
      "match": "^\\s*(mixin)\\s+([\\w-]+)(?:\\s*\\((.*)\\))?$",
      "captures": {
        "1": { "name": "storage.type.function.jade" },
        "2": { "name": "entity.name.function.jade" },
        "3": { "name": "variable.parameter.function.jade" }
      }
    },
    "mixin-call": {
      "name": "meta.function-call.jade",
      "match": "^\\s*(\\+)\\s*([\\w-]+)(?:\\s*\\((.*)\\))?$",
      "captures": {
        "1": { "name": "keyword.operator.jade" },
        "2": { "name": "entity.name.function.jade" },
        "3": { "name": "meta.function-call.arguments.jade" }
      }
    },
    "tag": {
      "patterns": [
        {
          "name": "meta.tag.jade",
          "match": "^(\\s*)([\\w-]+)(?=\\s|\\.|\\#|\\(|$)",
          "captures": {
            "2": { "name": "entity.name.tag.jade" }
          }
        },
        {
          "name": "meta.tag.id.jade",
          "match": "#([\\w-]+)",
          "captures": {
            "1": { "name": "entity.other.attribute-name.id.jade" }
          }
        },
        {
          "name": "meta.tag.class.jade",
          "match": "\\.([\\w-]+)",
          "captures": {
            "1": { "name": "entity.other.attribute-name.class.jade" }
          }
        },
        {
          "name": "meta.tag.attributes.jade",
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            {
              "match": "([\\w-]+)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|(\\S+))",
              "captures": {
                "1": { "name": "entity.other.attribute-name.jade" },
                "2": { "name": "string.quoted.double.jade" },
                "3": { "name": "string.quoted.single.jade" },
                "4": { "name": "string.unquoted.jade" }
              }
            }
          ]
        }
      ]
    },
    "script-block": {
      "name": "source.js.embedded.jade",
      "begin": "^(\\s*)(-|=|!=)\\s+",
      "beginCaptures": {
        "2": { "name": "punctuation.section.embedded.js" }
      },
      "end": "^(?!(\\1\\s+)|(\\s*$))",
      "patterns": [
        {
          "include": "source.js"
        }
      ]
    },
    "plain-text": {
      "name": "text.plain.jade",
      "match": "^\\s*\\|\\s*(.+)$",
      "captures": {
        "1": { "name": "string.unquoted.jade" }
      }
    }
  }
}
